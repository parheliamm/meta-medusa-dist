# if you experience problems, check
# http://www.rsyslog.com/troubleshoot for assistance

# rsyslog v3: load input modules
# If you do not load inputs, nothing happens!
# You may need to set the module load path if modules are not found.
#
# Ported from debian's sysklogd.conf

#$ModLoad immark   # provides --MARK-- message capability
#$ModLoad imuxsock # provides support for local system logging (e.g. via logger command)
#$ModLoad imklog   # kernel logging (formerly provided by rklogd)

module(load="omprog")
#module(load="imuxsock")
#module(load="imjournal")  # systemd-journal

module(load="imuxsock"   
       SysSock.Use="on"
       SysSock.Name="/run/systemd/journal/syslog")

module( load="builtin:omfile"
        # Use traditional timestamp format.
        # To enable high precision timestamps, use the following line:
        #  template="RSYSLOG_FileFormat"
        template="RSYSLOG_TraditionalFileFormat"

        # Set the default permissions for all log files.
        fileOwner="root"
        fileGroup="adm"
        dirOwner="root"
        dirGroup="adm"
        fileCreateMode="0640"
        dirCreateMode="0755"
)

set $.MEDUSA_VERSION_RAW = `cat /etc/medusa-version`;
set $.MEDUSA_VERSION = replace($.MEDUSA_VERSION_RAW, '\n', "");

template(name="system-template" type="list")
{
  constant(value="{")
  constant(value="\"@timestamp\":\"")     property(name="timereported" dateFormat="rfc3339")
  constant(value="\",\"@version\":\"1")
  constant(value="\",\"message\":\"")     property(name="msg" format="json")
  constant(value="\",\"sysloghost\":\"")  property(name="hostname")
  constant(value="\",\"severity\":\"")    property(name="syslogseverity-text")
  constant(value="\",\"facility\":\"")    property(name="syslogfacility-text")
  constant(value="\",\"programname\":\"") property(name="programname")
  constant(value="\",\"procid\":\"")      property(name="procid")
  constant(value="\",\"firmware\":\"")    property(name="$.MEDUSA_VERSION")
  constant(value="\"}\n")
}

#*.* /var/log/syslog

*.warning { 
    #action(type="omfile" file="/var/log/syslog2" template="system-template" queue.size="2000" queue.maxDiskSpace="4m")

    action(
      type="omfwd"
      target="logging.stromerbike.com"
      port="514"
      protocol="tcp"
      queue.filename="forwarding"
      queue.size="1000"
      queue.type="LinkedList"
      queue.saveOnShutdown="on"
      queue.maxFileSize="1m"
      queue.spoolDirectory="/var/log"
      queue.maxDiskSpace="4m"
      template="system-template"
    )

    stop
}

#*.* /var/log/syslog;system-template

#
# Set the default permissions
#
#$FileOwner root
#$FileGroup adm
#$FileCreateMode 0640
#$DirCreateMode 0755
#$Umask 0022

#auth,authpriv.*                 /var/log/auth.log
#*.*;auth,authpriv.none          -/var/log/syslog
#cron.*                          /var/log/cron.log
#daemon.*                        -/var/log/daemon.log
#kern.*                          -/var/log/kern.log
#lpr.*                           -/var/log/lpr.log
#mail.*                          -/var/log/mail.log
#user.*                          -/var/log/user.log

#
# Logging for the mail system.  Split it up so that
# it is easy to write scripts to parse these files.
#
#mail.info                       -/var/log/mail.info
#mail.warn                       -/var/log/mail.warn
#mail.err                        /var/log/mail.err

# Logging for INN news system
#
#news.crit                       /var/log/news.crit
#news.err                        /var/log/news.err
#news.notice                     -/var/log/news.notice

#
# Some `catch-all' logfiles.
#
#*.=debug;\
#        auth,authpriv.none;\
#        news.none;mail.none     -/var/log/debug
#*.=info;*.=notice;*.=warn;\
#        auth,authpriv.none;\
#        cron,daemon.none;\
#        mail,news.none          -/var/log/messages

#
# Emergencies are sent to everybody logged in.
#
#*.emerg                         :omusrmsg:*

# Save boot messages also to boot.log
#local7.*                                                /var/log/boot.log

# Remote Logging (we use TCP for reliable delivery)
# An on-disk queue is created for this action. If the remote host is
# down, messages are spooled to disk and sent when it is up again.
#$WorkDirectory /var/spool/rsyslog # where to place spool files
#$ActionQueueFileName uniqName # unique name prefix for spool files
#$ActionQueueMaxDiskSpace 1m   # 1gb space limit (use as much as possible)
#$ActionQueueSaveOnShutdown on # save messages to disk on shutdown
#$ActionQueueType LinkedList   # run asynchronously
#$ActionResumeRetryCount -1    # infinite retries if host is down
# remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional
#*.* @@remote-host:514


# ######### Receiving Messages from Remote Hosts ##########
# TCP Syslog Server:
# provides TCP syslog reception and GSS-API (if compiled to support it)
#$ModLoad imtcp.so  # load module
#$InputTCPServerRun 514 # start up TCP listener at port 514

# UDP Syslog Server:
#$ModLoad imudp.so  # provides UDP syslog reception
#$UDPServerRun 514 # start a UDP syslog server at standard port 514

